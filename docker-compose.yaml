version: '3.8'

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: always


  redis:
    image: redis:7-alpine
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass $$REDIS_PASSWORD
    volumes:
      - redis_data:/data

  celery:
    build: .
    command: celery -A beauty_salon_api worker -l info
    volumes:
      - .:/app
    environment:
      - DEBUG=${DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    depends_on:
      - db
      - redis

  celery-beat:
    build: .
    command: celery -A beauty_salon_api beat -l info
    volumes:
      - .:/app
    environment:
      - DEBUG=${DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    depends_on:
      - db
      - redis

  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DEBUG=${DEBUG}
      - DB_HOST=${DB_HOST}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    restart: on-failure
    depends_on:
      - db
      - redis

  admin_front:  # <-- Новый сервис для админки (Nuxt.js)
    build:
      context: ./h-club_admin_front
      dockerfile: Dockerfile
    ports:
      - "3002:3000"  # Порт из ENV в Dockerfile фронтенда
    volumes:
      - ./h-club_admin_front:/front
      - /front/node_modules  # Изолируем node_modules
    environment:
      - NUXT_HOST=0.0.0.0
      - NUXT_PORT=3000
    depends_on:
      - web  # Зависит от бэкенда (если API нужно)
    restart: unless-stopped

volumes:
  postgres_data:
  media_volume:
  redis_data:
